<?php

// run: php bin/generate-types
// output: /Users/brad/Desktop/gift-registry/components/types.ts

$srcDirectory = __DIR__ . '/../src';
$outputFile = __DIR__ . '/../components/types.ts';

$files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($srcDirectory));
$types = [];
$enums = [];

foreach ($files as $file) {
    if ($file->isFile() && pathinfo($file, PATHINFO_EXTENSION) === 'php') {
        $content = file_get_contents($file->getRealPath());
        if (preg_match('/#\[DTO\]/', $content) || preg_match('/#\[DTOEnum\]/', $content)) {
            require_once $file->getRealPath();
        }
    }
}

$declaredClasses = get_declared_classes();

foreach ($declaredClasses as $class) {
    $reflectionClass = new ReflectionClass($class);
    $attributes = $reflectionClass->getAttributes();

    foreach ($attributes as $attribute) {
        if ($attribute->getName() === 'App\Attributes\DTO') {
            echo "Processing class: $class\n"; // Debugging output
            $className = $reflectionClass->getShortName();
            $properties = $reflectionClass->getProperties(ReflectionProperty::IS_PUBLIC);
            $typeScriptProps = [];

            foreach ($properties as $property) {
                $type = $property->getType();
                
                $typeName = $type ? $type->getName() : 'any';

                // Handle array types with #[ArrayOf]
                $propertyAttributes = $property->getAttributes();
                foreach ($propertyAttributes as $propertyAttribute) {
                    if ($propertyAttribute->getName() === 'App\Attributes\ArrayOf') {
                        $args = $propertyAttribute->getArguments();
                        if (isset($args[0])) {
                            $typeName = basename(str_replace('\\', '/', $args[0])) . '[]';
                        }
                    }
                }
                
                // Convert PHP types to TypeScript types
                if ($typeName === 'int') {
                    $typeName = 'number'; // Convert PHP int to TypeScript number
                } elseif ($typeName === 'bool') {
                    $typeName = 'boolean'; // Convert PHP bool to TypeScript boolean
                } elseif ($typeName === 'array') {
                    $typeName = 'any[]'; // Default to any[] for arrays
                } elseif (strpos($typeName, 'App\\') !== false) {
                    $typeName = basename(str_replace('\\', '/', $typeName)); // Convert PHP namespace to TypeScript type
                }

                $typeScriptProps[] = "{$property->getName()}: {$typeName};";
            }

            $types[] = "export interface {$className} {\n    " . implode("\n    ", $typeScriptProps) . "\n}";
        } elseif ($attribute->getName() === 'App\Attributes\DTOEnum') {
            echo "Processing enum: $class\n";
            $enumName = $reflectionClass->getShortName();
            $enumCases = $reflectionClass->getConstants();
            $typeScriptEnumCases = [];

            foreach ($enumCases as $case) {
                $caseName = $case->name;
                $caseValue = $case->value;
                $typeScriptEnumCases[] = "{$caseName} = '{$caseValue}'";
            }

            $enums[] = "export enum {$enumName} {\n    " . implode(",\n    ", $typeScriptEnumCases) . "\n}";
        }
    }
}

file_put_contents($outputFile, implode("\n\n", array_merge($types, $enums)));

echo "TypeScript types and enums generated in {$outputFile}\n";